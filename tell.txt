移动端布局方案：

1. 流式布局（100%布局）：元素宽度100%，高度固定，手机屏越长显示内容越多，适合于列表页面。

（1）控件弹性：不同宽度的手机屏幕上，页面的控件宽度要相应的变化（如tabbar、header等）。
（2）文字流式：文字大小固定，让宽度不同的屏幕显示的文字个数不同，宽屏则显示的多一些。
（3）图片等比例缩放：不同宽度的手机屏幕上，图的宽度变了，那么其高度也要相应的变化，否则就会变形（如banner、图片list等）。


2. 等比缩放布局（rem布局）：无论手机屏幕大小，显示的内容一样多。

（1）rem：相对于html根元素(html)的font-size的大小进行赋值的单位，比如html的font-size设成100px，那么其他元素的宽高等一切尺寸都设成rem时，其实际尺寸
    就等于rem尺寸乘以100，实际项目中，如果只是把html的font-size设成一个固定的数值，那并不能达到在不同尺寸屏幕上的等比缩放，所以要想办法将不同
    尺寸屏幕的根元素的font-size赋予合适的不同的值，即动态的去改变不同宽度屏幕的根元素的font-size的值。
（2）vw、vh：1vw = window.innerWidth / 100（1vw等于当前屏幕宽度的1/100），接着（1）中的问题，既然在不同尺寸屏幕上1vw的值是根据屏幕宽度动态改变的，
    那将html的font-size设成以vm为单位的值就可以实现所有尺寸的等比缩放。为了方便运算，要保证在不同尺寸屏幕上html的font-size由vw换算成px后都等于100px不变，
    所以要用100除以当前屏幕下1vw的值算出来的就是要在html上设置的font-size的以vw为单位的值。
    算法为：100/（window.innerWidth / 100），如当前手机宽度为375px,则1vw=3.75px,那么100px就等于26.666667vm，那么html的font-size就不能直接在csss上写死，
    它需要我们在js中根据当前屏幕尺寸算出来，再赋值给html
    vh与vw一样，只是它是根据window.innerHeight来计算的。


3. 移动端尽量避免使用float、position:fixd和margin
    
